Input: head = [5,3,1,2,5,1,2]
Output: [1,3]
Explanation: There are three critical points:
- [5,3,1,2,5,1,2]: The third node is a local minima because 1 is less than 3 and 2.
- [5,3,1,2,5,1,2]: The fifth node is a local maxima because 5 is greater than 2 and 1.
- [5,3,1,2,5,1,2]: The sixth node is a local minima because 1 is less than 5 and 2.
The minimum distance is between the fifth and the sixth node. minDistance = 6 - 5 = 1.
The maximum distance is between the third and the sixth node. maxDistance = 6 - 3 = 3.
Code:

vector<int> nodesBetweenCriticalPoints(ListNode* head) {
     vector<int>ans={-1,-1};
     ListNode*prev=head;
     if(!prev) return ans;
     ListNode*curr=head->next;
     if(!curr) return ans;
     ListNode*nxt=head->next->next;
     if(!nxt) return ans;
     int firstCP= -1;
     int lastCP= -1;
     int minDist= INT_MAX;
     int i=1;
     while(nxt){
      bool isCP=((curr->val>prev->val && curr->val>nxt->val) || (curr->val<prev->val && curr->val<nxt->val))?true:false;
      if(isCP && firstCP== -1){
          firstCP=i;
          lastCP=i;
      }   
      else if(isCP){
          minDist=min(minDist,i-lastCP);
          lastCP=i;
      }
      i++;
      prev=prev->next;
      curr=curr->next;
      nxt=nxt->next;
     }
     if(firstCP==lastCP){
         return ans;
     }
     else{
         ans[0]=minDist;
         ans[1]=lastCP-firstCP;
     }
     return ans;
    }
